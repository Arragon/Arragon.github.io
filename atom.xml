<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>生活在此处</title>
  
  <subtitle>Nowhere Else</subtitle>
  <link href="https://arragon.github.io/atom.xml" rel="self"/>
  
  <link href="https://arragon.github.io/"/>
  <updated>2023-10-10T08:14:41.262Z</updated>
  <id>https://arragon.github.io/</id>
  
  <author>
    <name>Arragon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://arragon.github.io/2023/10/10/16-14-41/"/>
    <id>https://arragon.github.io/2023/10/10/16-14-41/</id>
    <published>2023-10-10T08:14:41.262Z</published>
    <updated>2023-10-10T08:14:41.262Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>VsCode中部署fortls的一些问题</title>
    <link href="https://arragon.github.io/2023/10/10/08-31-52/"/>
    <id>https://arragon.github.io/2023/10/10/08-31-52/</id>
    <published>2023-10-10T00:31:52.000Z</published>
    <updated>2023-10-10T09:19:34.825Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要参考</p><ol><li><a href="https://zhuanlan.zhihu.com/p/524480747">https://zhuanlan.zhihu.com/p/524480747</a></li><li><a href="https://fortran-lang.discourse.group/t/auto-format-with-modern-fortran-extension-does-not-work/5218">https://fortran-lang.discourse.group/t/auto-format-with-modern-fortran-extension-does-not-work/5218</a></li></ol></blockquote><h1 id="vscode中部署fortls的一些问题"><a class="markdownIt-Anchor" href="#vscode中部署fortls的一些问题"></a> VsCode中部署fortls的一些问题</h1><h2 id="fortls与fortran-language-server的关系"><a class="markdownIt-Anchor" href="#fortls与fortran-language-server的关系"></a> <code>fortls</code>与<code>fortran-language-server</code>的关系</h2><p>根据<code>[项目主页]</code>(<a href="https://github.com/fortran-lang/fortls">https://github.com/fortran-lang/fortls</a>)的描述,fortls项目基于fortran-language-server项目,但现在已经独立为两个项目.<br />fortls目前仍在维护,而fortran-language-server的最后一次更新是在<code>2020年</code>,因此推荐使用fortls.</p><blockquote><p><strong>注意⚠️</strong> fortls与fortran-language-server不能同时安装</p></blockquote><h2 id="应该选择哪个插件modern-fortranfortran与fortran-intellisense"><a class="markdownIt-Anchor" href="#应该选择哪个插件modern-fortranfortran与fortran-intellisense"></a> 应该选择哪个插件:<code>Modern Fortran</code>,<code>fortran</code>与<code>FORTRAN IntelliSense</code></h2><p>一般教程中都是用<code>Modern Fortran</code> + <code>FORTRAN IntelliSense</code>,但事实上<code>Modern Fortran</code>已经支持了<code>fortls</code>服务,因此只需要安装<code>Modern Fortran</code>即可.</p><blockquote><p><strong>注意⚠️</strong> <code>Modern Fortran</code>与另一个插件<code>fortran</code>相冲突,不可以同时安装</p></blockquote><h2 id="modern-fortran插件的配置"><a class="markdownIt-Anchor" href="#modern-fortran插件的配置"></a> <code>Modern Fortran</code>插件的配置</h2><p>一般配置两个功能:自动格式化<code>findent</code>与<code>fortls</code>服务.</p><h3 id="findent的配置"><a class="markdownIt-Anchor" href="#findent的配置"></a> <code>findent</code>的配置</h3><p><code>findent</code>可以通过<code>pip</code>安装:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install findent</span><br></pre></td></tr></table></figure><p>然后在Modern Fortran的设置选项中找到<br /><code>Fortran&gt;Formatting: Formatter</code>并设置为<code>findent</code><br />并在<code>Fortran&gt;Formatting: path</code>中设置<code>findent</code>的路径,例如:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:/Users/username/AppData/Roaming/Python/bin</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意⚠️</strong> 确认自己使用的python的安装位置<br /><strong>注意⚠️</strong> 注意区分&quot;/“与windows文件系统中的”&quot;</p></blockquote><p>也可以在系统环境变量<code>$PATH</code>中添加上述链接</p><blockquote><p><strong>注意⚠️</strong> 是findent.exe所在的目录,而不是findent.exe的完整路径,也即路径中不应包含findent.exe</p></blockquote><h3 id="fortls的配置"><a class="markdownIt-Anchor" href="#fortls的配置"></a> <code>fortls</code>的配置</h3><p>在<code>Modern Fortran</code>的设置选项中找到<code>Fortran&gt;Fortls: Path</code>并设置为<code>fortls</code>的路径,例如:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:/Users/10056/AppData/Roaming/Python/Python311/Scripts/fortls.exe</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意⚠️</strong> 此处使用的是<code>fortls.exe</code>的完整路径,也即路径中应包含fortls.exe,而不是fortls.exe所在的目录,因为会弹出提示,要求输入<code>fortls binary path</code></p></blockquote><h2 id="其他问题"><a class="markdownIt-Anchor" href="#其他问题"></a> 其他问题</h2><h3 id="pip过程报错"><a class="markdownIt-Anchor" href="#pip过程报错"></a> pip过程报错</h3><p>这部分对不常用python的人来说最折磨了</p><h4 id="error-could-not-install-packages-due-to-an-oserror-winerror-5-拒绝访问-cpython311bin-consider-using-the-user-option-or-check-the-permissions"><a class="markdownIt-Anchor" href="#error-could-not-install-packages-due-to-an-oserror-winerror-5-拒绝访问-cpython311bin-consider-using-the-user-option-or-check-the-permissions"></a> ERROR: Could not install packages due to an OSError: [WinError 5] 拒绝访问。: ‘C:\Python311\bin’ Consider using the <code>--user</code> option or check the permissions.</h4><p>以管理员身份运行cmd,卸载重装即可</p><h4 id="提示equirement-already-satisfiedfortls"><a class="markdownIt-Anchor" href="#提示equirement-already-satisfiedfortls"></a> 提示<code>equirement already satisfied:fortls</code></h4><p>卸载重装即可</p><h4 id="error-exception-traceback-most-recent-call-last"><a class="markdownIt-Anchor" href="#error-exception-traceback-most-recent-call-last"></a> ERROR: Exception: Traceback (most recent call last):</h4><p>网络问题,建议使用国内镜像源,例如清华源:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install findent -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install findent -i https://pypi.doubanio.com/simple</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文主要参考&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/524480747&quot;&gt;https://zhuanlan.zhihu.com/p/524480747&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a </summary>
      
    
    
    
    
    <category term="Fortran" scheme="https://arragon.github.io/tags/Fortran/"/>
    
    <category term="VsCode" scheme="https://arragon.github.io/tags/VsCode/"/>
    
    <category term="Fortls" scheme="https://arragon.github.io/tags/Fortls/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://arragon.github.io/2023/07/05/21-59-40/"/>
    <id>https://arragon.github.io/2023/07/05/21-59-40/</id>
    <published>2023-07-05T13:59:40.534Z</published>
    <updated>2023-07-05T14:00:30.075Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hfss"><a class="markdownIt-Anchor" href="#hfss"></a> HFSS</h1><blockquote><p>Ansys HFSS中的Solve Inside是是否对该模型内部进行求解的选项，在选中后将对该模型内部进行网格划分和电场求解，否则将只对模型表面进行网格划分而不会求解内部的电场。对于良导体而言，由于电磁波的趋肤效应，电磁场能量都分布在靠近导体表面的地方，因而无需对导体内部进行电场的计算。在默认设置下，材料为良导体（如铜、银、PEC等）的模型Solve Inside选项都是未选中状态，HFSS会自动计算趋肤深度并对损耗进行修整。但是，如果导体的厚度与趋肤深度相近，或小于趋肤深度时，如果需要精确考虑导体损耗，请将Solve Inside设置为开。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hfss&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#hfss&quot;&gt;&lt;/a&gt; HFSS&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Ansys HFSS中的Solve Inside是是否对该模型内部进行求解的选项，在选中后将对该模型内部进</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Fortran note for file read and write</title>
    <link href="https://arragon.github.io/2023/06/27/00-00-00/"/>
    <id>https://arragon.github.io/2023/06/27/00-00-00/</id>
    <published>2023-06-26T16:00:00.000Z</published>
    <updated>2023-06-27T09:16:34.387Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要参考：</p><ol><li><a href="http://micro.ustc.edu.cn/Fortran/ZJDing/Sec7-1.htm">http://micro.ustc.edu.cn/Fortran/ZJDing/Sec7-1.htm</a></li><li><a href="https://www.yiibai.com/fortran/fortran_file_input_output.html">https://www.yiibai.com/fortran/fortran_file_input_output.html</a></li><li><a href="https://blog.csdn.net/m0_37816922/article/details/128850076?utm_medium=distribute.pc_relevant.none-task-blog-2">https://blog.csdn.net/m0_37816922/article/details/128850076?utm_medium=distribute.pc_relevant.none-task-blog-2</a><sub>default</sub>baidujs_baidulandingword~default-0-128850076-blog-122546172.235<sup>v38</sup>pc_relevant_sort_base3&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=1</li></ol></blockquote><p>本文旨在解决Fortran最基本的文件操作，不探讨更深入的高级内容</p><h1 id="写入流程open-wirte-close"><a class="markdownIt-Anchor" href="#写入流程open-wirte-close"></a> 写入流程:open - wirte - close</h1><h2 id="在写入文件之前必须先打开文件"><a class="markdownIt-Anchor" href="#在写入文件之前必须先打开文件"></a> 在写入文件之前,必须先打开文件</h2><p><code>open</code>语句的<strong>最简单形式</strong>是:</p><figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">open (<span class="keyword">unit</span> = <span class="keyword">number</span>, <span class="keyword">file</span> = <span class="string">&quot;name&quot;</span>).</span><br></pre></td></tr></table></figure><p><code>open</code>语句的一般格式为:</p><figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">open(<span class="keyword">unit</span>=文件标识符, <span class="keyword">file</span>=文件名, <span class="keyword">status</span>=状态, <span class="keyword">access</span>=访问模式, <span class="keyword">form</span>=格式说明符, <span class="keyword">action</span>=动作, <span class="keyword">iostat</span>=状态变量, <span class="keyword">iomsg</span>=状态信息, err=错误处理, <span class="keyword">RECL</span> = rl)</span><br></pre></td></tr></table></figure><p>修饰符的解释</p><ol><li><code>unit</code>:取值为0-999的数字，作为文件的标识符，每个标识符只能对应一个文件</li><li><code>status</code>:它表示了该文件的先前状态。可以为三个值:<code>NEW</code>, <code>OLD</code>, <code>replace</code> 或 <code>SCRATCH</code>。<code>new</code>表示该文件不存在；<code>old</code>表示该文件已存在，<code>replace</code>表示覆盖原本的文件，<code>scratch</code>表示创建临时文件，不需要文件名,程序关闭时即销毁.</li><li><code>access</code>:它表示了该文件的访问模式。可以为三个值:<code>SEQUENTIAL</code>, <code>DIRECT</code> 或 <code>STREAM</code>。&quot;<code>equential</code>表示顺序读写；<code>direct</code>则可指定任意位置读写.默认值为<code>SEQUENTIAL</code>。</li><li><code>form</code>:它表示了该文件的格式。可以为两个值:<code>FORMATTED</code> 或 <code>UNFORMATTED</code>。<code>formatted</code>表示存为文本文件；<code>unformatted</code>表示存为二进制文件. 默认值为<code>FORMATTED</code>。</li><li><code>action</code>:它表示了该文件的动作。可以为两个值:<code>READ</code> 或 <code>WRITE</code>。默认值为<code>READ</code>。</li><li><code>iostat</code>:I/O状态，为整型。默认值为0。</li><li><code>iomsg</code>:它表示了该文件的状态信息。默认值为一个空字符串。</li><li><code>err</code>:它表示了该文件的错误处理。可以为两个值:<code>EXISTS</code> 或 <code>UNKNOWN</code>。默认值为<code>EXISTS</code>。</li><li><code>RECL</code>:它表示了该文件的记录长度,或称文件字节长度。默认值为1。</li></ol><h2 id="随后可以进行write操作"><a class="markdownIt-Anchor" href="#随后可以进行write操作"></a> 随后可以进行write操作</h2><p>用于输出的<code>WRITE</code>语句的一般形式为：</p><figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="built_in">WRITE</span>(&#123;[<span class="keyword">UNIT</span>=]文件标识符|*&#125;[,&#123;[<span class="keyword">FMT</span>=]格式说明符|[<span class="keyword">NML</span>=]名称列表组名|*&#125;][，<span class="keyword">REC</span>=记录号][,<span class="keyword">IOSTAT</span>=状态变量名][,ERR＝错误标号]) [I/O列表]</span><br></pre></td></tr></table></figure><p><code>[I/O]列表</code>表示要写入文件的数据项,可以是常量,变量,数组,表达式,函数等.<br /><code>[UNIT=]文件标识符</code>表示要写入哪个文件,<code>*</code>表示标准输出.<br /><code>[FMT=]格式说明符</code>表示写入格式<br /><code>[NML=]名称列表组名</code>表示名称列表组名.<br /><code>[REC=]记录号</code>表示写入文件的记录号<br /><code>[IOSTAT=]状态变量名</code>表示状态变量名<br /><code>[ERR=]错误标号</code>表示错误标号.</p><p><code>Write</code>常用的<strong>最简单形式</strong>为:</p><figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="built_in">write</span>(<span class="keyword">unit</span> = 文件标识符, <span class="keyword">fmt</span>)</span><br></pre></td></tr></table></figure><p>其中<code>unit</code>为文件标识符,用于表示写入哪个文件,<code>fmt</code>为写入格式.<br />写入格式为<code>fA.B</code>,其中<code>A</code>表示宽度,<code>B</code>表示保留小数位数.<br /><code>f4.3</code>表示保留3位小数的同时，宽度为4.<br /><code>f20.15</code>表示保留15位小数，同时占据20个字符的宽度.<br />如果不想设置格式,可以记作<code>*</code>,即:</p><figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="built_in">write</span>(<span class="keyword">unit</span>, *)</span><br></pre></td></tr></table></figure><h2 id="最后必须要close"><a class="markdownIt-Anchor" href="#最后必须要close"></a> 最后必须要close</h2><p><code>close</code>语句的一般形式为:</p><figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">close (<span class="keyword">unit</span> = 文件标识符)</span><br></pre></td></tr></table></figure><h2 id="例子"><a class="markdownIt-Anchor" href="#例子"></a> 例子</h2><figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> fileTest</span><br><span class="line"><span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">real</span>, <span class="keyword">dimension</span>(<span class="number">100</span>) :: x, y  </span><br><span class="line">   <span class="keyword">integer</span> :: i</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">do</span> i=<span class="number">1</span>,<span class="number">100</span></span><br><span class="line">      x(i) = i * <span class="number">0.1</span> </span><br><span class="line">      y(i) = <span class="built_in">sin</span>(x(i))</span><br><span class="line">   <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">   open(<span class="number">1</span>, <span class="keyword">file</span> = <span class="string">&#x27;test.txt&#x27;</span>, <span class="keyword">status</span> = <span class="string">&#x27;new&#x27;</span>)  <span class="comment">!打开名为test.txt的文件，如果文件不存在则创建,文件号记为1</span></span><br><span class="line">   <span class="keyword">do</span> i=<span class="number">1</span>,<span class="number">100</span>  </span><br><span class="line">      <span class="built_in">write</span>(<span class="number">1</span>,*) x(i), y(i)   <span class="comment">!将x(i)和y(i)写入文件1,写入格式为默认</span></span><br><span class="line">   <span class="keyword">end</span> <span class="keyword">do</span>  </span><br><span class="line">   </span><br><span class="line">   close(<span class="number">1</span>)     <span class="comment">!关闭文件1</span></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> fileTest</span><br></pre></td></tr></table></figure><p>输出结果为:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0.100000001       9.98334214E-02</span><br><span class="line">0.200000003      0.198669329    </span><br><span class="line">0.300000012      0.295520216    </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文主要参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://micro.ustc.edu.cn/Fortran/ZJDing/Sec7-1.htm&quot;&gt;http://micro.ustc.edu.cn/Fortran/ZJDing/Se</summary>
      
    
    
    
    
    <category term="Fortran" scheme="https://arragon.github.io/tags/Fortran/"/>
    
    <category term="note" scheme="https://arragon.github.io/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>Fortran note for Function, Subroutine and Module</title>
    <link href="https://arragon.github.io/2023/06/26/00-00-00/"/>
    <id>https://arragon.github.io/2023/06/26/00-00-00/</id>
    <published>2023-06-25T16:00:00.000Z</published>
    <updated>2023-06-28T14:28:46.092Z</updated>
    
    <content type="html"><![CDATA[<h1 id="function"><a class="markdownIt-Anchor" href="#function"></a> Function</h1><p><em><strong><code>function</code>和<code>subroutine</code>的形参都需要在<code>function</code>和<code>subroutine</code>内部声明一次才能被调用</strong></em><br />在声明时可以加入修饰词<code>intent(in)</code>以及<code>intent(out)</code>来限制变量的使用范围.&quot;intent(in)&quot;的虚参只读,不可修改,可以用来保护输入参数.</p><h2 id="调用"><a class="markdownIt-Anchor" href="#调用"></a> 调用:</h2><figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">返回变量 = 名称 ([实参<span class="number">1</span>,实参<span class="number">2</span>,...])</span><br></pre></td></tr></table></figure><h2 id="函数定义"><a class="markdownIt-Anchor" href="#函数定义"></a> 函数定义:</h2><figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">[形容词][返回类型] <span class="function"><span class="keyword">function</span></span> 名称 ([虚参<span class="number">1</span>,虚参<span class="number">2</span>,...])</span><br><span class="line">    [虚参声明]</span><br><span class="line">    [局部变量的定义]</span><br><span class="line">    函数体</span><br><span class="line">        名称 = 返回值</span><br><span class="line">    [<span class="keyword">return</span>]</span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">function</span></span> 名称</span><br></pre></td></tr></table></figure><p><em><strong>函数有返回值,子程序没有返回值</strong></em></p><h3 id="例子"><a class="markdownIt-Anchor" href="#例子"></a> 例子</h3><figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">x = f(<span class="number">2.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">real</span> <span class="function"><span class="keyword">function</span></span> f(x)</span><br><span class="line">    <span class="keyword">real</span> x</span><br><span class="line">    f = x**<span class="number">2</span></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">function</span></span> f</span><br></pre></td></tr></table></figure><h1 id="subroutine"><a class="markdownIt-Anchor" href="#subroutine"></a> Subroutine</h1><h2 id="调用-2"><a class="markdownIt-Anchor" href="#调用-2"></a> 调用</h2><figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="keyword">call</span> 名称 ([实参<span class="number">1</span>,实参<span class="number">2</span>,...])</span><br></pre></td></tr></table></figure><h2 id="子程序定义"><a class="markdownIt-Anchor" href="#子程序定义"></a> 子程序定义</h2><figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">[形容词] <span class="function"><span class="keyword">subroutine</span></span> 名称 ([虚参<span class="number">1</span>,虚参<span class="number">2</span>,...])</span><br><span class="line">    [虚参声明]</span><br><span class="line">    [局部变量的定义]</span><br><span class="line">    子程序体</span><br><span class="line">    [<span class="keyword">return</span>]</span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">subroutine</span></span> 名称</span><br></pre></td></tr></table></figure><h3 id="例子-2"><a class="markdownIt-Anchor" href="#例子-2"></a> 例子</h3><figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="keyword">call</span> f(<span class="number">2.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">subroutine</span></span> f(x)</span><br><span class="line">    <span class="keyword">real</span> x</span><br><span class="line">    <span class="built_in">print</span> *, x**<span class="number">2</span></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">subroutine</span></span> f</span><br></pre></td></tr></table></figure><h1 id="module"><a class="markdownIt-Anchor" href="#module"></a> Module</h1><p><em><strong><code>module</code>内的<code>function</code>和<code>subroutine</code>都需要跟在<code>contains</code>后</strong></em></p><h2 id="调用-3"><a class="markdownIt-Anchor" href="#调用-3"></a> 调用</h2><figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> 模块名</span><br></pre></td></tr></table></figure><p><em><strong><code>use</code>必须放在<code>implicit</code>声明之前</strong></em><br /><em><strong>事实上所有<code>include</code>,变量声明等都必须放在<code>implicit none</code>前</strong></em><br /><em><strong><code>implicit</code>必须放在<code>contains</code>前</strong></em></p><p>合理的顺序如下:</p><figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> mymodule</span><br><span class="line">    <span class="keyword">include</span> lib</span><br><span class="line">    <span class="keyword">use</span> another_module</span><br><span class="line">    <span class="keyword">integer</span> :: i</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">contains</span></span><br><span class="line">    <span class="function"><span class="keyword">subroutine</span></span> f()</span><br><span class="line">        <span class="built_in">print</span> *, i</span><br><span class="line">    <span class="keyword">end</span> <span class="function"><span class="keyword">subroutine</span></span> f</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">module</span> mymodule</span><br></pre></td></tr></table></figure><h2 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义</h2><figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> 模块名</span><br><span class="line">    [公共变量的定义]</span><br><span class="line">    [子程序的定义]</span><br><span class="line">    [函数的定义]</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">module</span> 模块名</span><br></pre></td></tr></table></figure><p>Module是一个完整的代码块.<br />Module中的变量和子程序可以被其他程序调用,但是不能被其他程序修改.<br />Module的参数可以用<code>public</code>和<code>private</code>来控制是否可以被其他程序调用.<code>protected</code>控制可以被读取但不能别调用.<br />当你在Fortran中使用<code>use</code>语句导入一个模块时，该模块中定义的所有变量、常量和子程序都可以在当前程序中使用。因此，如果在<code>module</code>中已经use了<code>module2</code>，那么在主程序中使用<code>use module1</code>语句后，你就可以直接访问<code>module1</code>模块中定义的变量和子程序，包括通过<code>use module2</code>语句导入的<code>module2</code>模块中定义的变量。</p><p>注意，如果你在主程序中需要对<code>module2</code>模块中的变量进行操作，那么你仍然需要使用<code>use module2</code>语句来导入这些变量。否则，编译器将无法识别这些变量。<br />但是，如果你只需要访问<code>module2</code>模块中的变量，而不需要修改它们，那么在主程序中仅使用<code>use module1</code>语句即可。</p><h2 id="例子-3"><a class="markdownIt-Anchor" href="#例子-3"></a> 例子</h2><figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> my_module</span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> my_module</span><br><span class="line">    <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line">    <span class="keyword">integer</span>, <span class="keyword">parameter</span> :: n = <span class="number">10</span></span><br><span class="line">    <span class="keyword">real</span>, <span class="keyword">parameter</span> :: pi = <span class="number">3.14159265358979323846</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">contains</span></span><br><span class="line">    <span class="function"><span class="keyword">subroutine</span></span> print_hello()</span><br><span class="line">        <span class="built_in">print</span> *, <span class="string">&quot;Hello, world!&quot;</span></span><br><span class="line">    <span class="keyword">end</span> <span class="function"><span class="keyword">subroutine</span></span> print_hello</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span></span> circle_area(radius) result(area)</span><br><span class="line">        <span class="keyword">real</span> :: radius, area</span><br><span class="line">        area = pi * radius**<span class="number">2</span></span><br><span class="line">    <span class="keyword">end</span> <span class="function"><span class="keyword">function</span></span> circle_area</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">module</span> my_module</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h1 id="完整代码例程"><a class="markdownIt-Anchor" href="#完整代码例程"></a> 完整代码例程</h1><figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="comment">! 定义模块</span></span><br><span class="line"><span class="keyword">module</span> my_module</span><br><span class="line">  <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">! 定义公共参数</span></span><br><span class="line">  <span class="keyword">integer</span>, <span class="keyword">parameter</span> :: n = <span class="number">10</span></span><br><span class="line">  <span class="keyword">real</span>, <span class="keyword">parameter</span> :: pi = <span class="number">3.14159265358979323846</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">contains</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">! 定义模块中的子程序</span></span><br><span class="line">  <span class="function"><span class="keyword">subroutine</span></span> print_hello()</span><br><span class="line">    <span class="built_in">print</span> *, <span class="string">&quot;Hello, world!&quot;</span></span><br><span class="line">  <span class="keyword">end</span> <span class="function"><span class="keyword">subroutine</span></span> print_hello</span><br><span class="line"></span><br><span class="line">  <span class="comment">! 定义计算圆面积的函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span></span> circle_area(radius) result(area)</span><br><span class="line">    <span class="keyword">real</span> :: radius, area</span><br><span class="line">    area = pi * radius**<span class="number">2</span></span><br><span class="line">  <span class="keyword">end</span> <span class="function"><span class="keyword">function</span></span> circle_area</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">module</span> my_module</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">program</span></span> main</span><br><span class="line">  <span class="keyword">use</span> my_module</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">integer</span> :: i</span><br><span class="line">  <span class="keyword">real</span> :: r, a</span><br><span class="line"></span><br><span class="line">  <span class="comment">! 调用子程序</span></span><br><span class="line">  <span class="keyword">call</span> print_hello()</span><br><span class="line"></span><br><span class="line">  <span class="comment">! 调用函数</span></span><br><span class="line">  r = <span class="number">2.0</span></span><br><span class="line">  a = circle_area(r)</span><br><span class="line">  <span class="built_in">print</span> *, <span class="string">&quot;The area of the circle with radius&quot;</span>, r, <span class="string">&quot;is&quot;</span>, a</span><br><span class="line"></span><br><span class="line">  <span class="comment">! 调用公共参数</span></span><br><span class="line">  <span class="keyword">do</span> i = <span class="number">1</span>, n</span><br><span class="line">    <span class="built_in">print</span> *, i</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> main</span><br></pre></td></tr></table></figure><p>在上面的程序中，我们首先定义了一个名为<code>my_module</code>的模块。在模块中，我们定义了一个名为<code>print_hello</code>的子程序，它可以打印出<code>“Hello, world!”</code>。我们还定义了一个名为<code>circle_area</code>的函数，它可以计算圆的面积。在这个函数中，我们使用了模块中定义的常量<code>pi</code>。</p><p>在程序的主程序中，我们使用了<code>use my_module</code>语句来导入模块。这样就可以在主程序中调用模块中定义的子程序和函数。我们调用了<code>print_hello</code>子程序并打印出圆的面积。此外，我们还使用了模块中定义的常量<code>n</code>来循环打印数字。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;function&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#function&quot;&gt;&lt;/a&gt; Function&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;code&gt;function&lt;/code&gt;和&lt;code&gt;subroutine&lt;/co</summary>
      
    
    
    
    
    <category term="Fortran" scheme="https://arragon.github.io/tags/Fortran/"/>
    
    <category term="note" scheme="https://arragon.github.io/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>功能测试 - hexo</title>
    <link href="https://arragon.github.io/2023/06/10/00-00-00/"/>
    <id>https://arragon.github.io/2023/06/10/00-00-00/</id>
    <published>2023-06-09T16:00:00.000Z</published>
    <updated>2023-06-10T07:06:33.709Z</updated>
    
    <content type="html"><![CDATA[<h1 id="插入图片"><a class="markdownIt-Anchor" href="#插入图片"></a> 插入图片</h1><p><img src="https://s2.loli.net/2023/06/10/73eQqktBYbDGKfZ.jpg" alt="test" title="测试图片" /><br /><img src="https://raw.githubusercontent.com/Arragon/tuchuang/main/img/IMG_0157.JPG" alt="test2" /><br />使用图床SM.MS与github,通过<a href="https://github.com/Molunerfinn/PicGo">picgo</a>上传</p><h1 id="插入公式"><a class="markdownIt-Anchor" href="#插入公式"></a> 插入公式</h1><h1 id="插入表格"><a class="markdownIt-Anchor" href="#插入表格"></a> 插入表格</h1><h1 id="插入slide"><a class="markdownIt-Anchor" href="#插入slide"></a> 插入slide</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;插入图片&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#插入图片&quot;&gt;&lt;/a&gt; 插入图片&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/06/10/73eQqktBYbDGKfZ.jpg&quot; alt=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Melody troubleshooting</title>
    <link href="https://arragon.github.io/2023/06/04/18-52-12/"/>
    <id>https://arragon.github.io/2023/06/04/18-52-12/</id>
    <published>2023-06-04T10:52:12.373Z</published>
    <updated>2023-06-10T07:01:33.265Z</updated>
    
    <content type="html"><![CDATA[<h1 id="生成时报错extends-includeslayoutpug-block-content-recent-postsrecent-posts-include-includ"><a class="markdownIt-Anchor" href="#生成时报错extends-includeslayoutpug-block-content-recent-postsrecent-posts-include-includ"></a> 生成时报错：extends includes/layout.pug block content #recent-posts.recent-posts include includ</h1><ol><li>在博客目录下打开git bash</li><li>输入命令：npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</li><li>hexo clean（清除缓存）</li><li>hexo g（生成静态文件）</li><li>hexo s</li><li>hexo d(部署到GitHub上)</li></ol><blockquote><p>参考https://blog.csdn.net/TiAmopanduola/article/details/115671151</p></blockquote><h1 id="部署时报错-fatal-unable-to-access-httpsgithubcomarragonarragongithubiogit-failed-to-connect-to-githubcom-port-443-after-21103-ms-couldnt-connect-to-server"><a class="markdownIt-Anchor" href="#部署时报错-fatal-unable-to-access-httpsgithubcomarragonarragongithubiogit-failed-to-connect-to-githubcom-port-443-after-21103-ms-couldnt-connect-to-server"></a> 部署时报错: fatal: unable to access ‘<a href="https://github.com/Arragon/Arragon.github.io.git/">https://github.com/Arragon/Arragon.github.io.git/</a>’: Failed to connect to <a href="http://github.com">github.com</a> port 443 after 21103 ms: Couldn’t connect to server</h1><p>原因是SSL证书错误</p><ol><li>首先尝试关闭SSL验证</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global http.sslverify false</span><br></pre></td></tr></table></figure><p>这并不是一个安全的方法,只是一次尝试,但是失败了<br /><strong>别忘了再次打开SSL验证</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global http.sslverify true</span><br></pre></td></tr></table></figure><ol start="2"><li>随后尝试使用账户密码登录<br />修改_config.yml</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">url = https://username:password@github.com/pythonsoft/test.git</span><br></pre></td></tr></table></figure><p>依然失败,因为github自<code>August 13, 2021</code>之后因安全原因不再提供此种方法,推荐使用<code>git-credential-cache</code>命令缓存密码<br />有点麻烦,还没有尝试<br />3. 临时起意,尝试了一次清空缓存命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>随后再部署,成功了<br />以后每次重新部署,养成先清缓存的好习惯</p><h2 id="更新绷不住又失败了清空缓存也没用"><a class="markdownIt-Anchor" href="#更新绷不住又失败了清空缓存也没用"></a> 更新：绷不住，又失败了，清空缓存也没用</h2><p>尝试使用<code>git-credential-cache</code>方法</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global credential.helper cache</span><br></pre></td></tr></table></figure><p>还是不行,仍然报身份验证错误</p><h1 id="最终解决方法"><a class="markdownIt-Anchor" href="#最终解决方法"></a> 最终解决方法</h1><p>关闭SSL验证</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global http.sslverify false</span><br></pre></td></tr></table></figure><p>虽然不安全,但是确实有效</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;生成时报错extends-includeslayoutpug-block-content-recent-postsrecent-posts-include-includ&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#生成时报错exten</summary>
      
    
    
    
    
    <category term="hexo" scheme="https://arragon.github.io/tags/hexo/"/>
    
    <category term="hexo theme" scheme="https://arragon.github.io/tags/hexo-theme/"/>
    
    <category term="melody" scheme="https://arragon.github.io/tags/melody/"/>
    
  </entry>
  
  <entry>
    <title>Hexo的安装和初始化</title>
    <link href="https://arragon.github.io/2023/06/04/17-23-24/"/>
    <id>https://arragon.github.io/2023/06/04/17-23-24/</id>
    <published>2023-06-04T09:23:24.016Z</published>
    <updated>2023-06-09T12:29:04.934Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记录一下hexo的安装与初始化过程"><a class="markdownIt-Anchor" href="#记录一下hexo的安装与初始化过程"></a> 记录一下Hexo的安装与初始化过程</h1><blockquote><p>官方文档:<a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85-Hexo">https://hexo.io/zh-cn/docs/#安装-Hexo</a></p></blockquote><h2 id="1-安装nodejs"><a class="markdownIt-Anchor" href="#1-安装nodejs"></a> 1. 安装Node.js</h2><h2 id="2-配置git"><a class="markdownIt-Anchor" href="#2-配置git"></a> 2. 配置git</h2><h2 id="3-根据文档安装hexo"><a class="markdownIt-Anchor" href="#3-根据文档安装hexo"></a> 3. 根据文档安装Hexo</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install hexo</span><br></pre></td></tr></table></figure><p>安装完成后进行初始化</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo init &lt;your blog name&gt;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> &lt;your blog name&gt;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install</span></span><br></pre></td></tr></table></figure><h2 id="4-文件组成"><a class="markdownIt-Anchor" href="#4-文件组成"></a> 4. 文件组成</h2><p><code>_config.yml</code>可以配置网站信息<br /><code>source/posts</code>发布文章</p><h2 id="5-配置端口"><a class="markdownIt-Anchor" href="#5-配置端口"></a> 5. 配置端口</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo s -p 5555</span></span><br></pre></td></tr></table></figure><blockquote><p>本地访问博客:localhost:5555</p></blockquote><h2 id="6-部署到github"><a class="markdownIt-Anchor" href="#6-部署到github"></a> 6. 部署到github</h2><p>在<code>_config.yml</code>中更改 <code>Author</code>, <code>url: your_io_location</code><br />新增<br /><code>type: git</code><br /><code>repo: your_gitpage_repo_location</code><br /><code>branch: your_branch_name</code></p><p>安装依赖插件<br /><code>$ npm install hexo-deployer-git --save</code></p><p>本地生成<br /><code>$ hexo g</code></p><p>部署<br /><code>hexo d</code></p><blockquote><p>如果报错<code>SSL certificate problem: unable to get local issuer certificate</code><br />使用<code>git config --global http.sslverify false</code>关闭签名验证即可</p></blockquote><p>每次修改与更新都需要重复<br /><code>$ hexo g</code><br /><code>hexo d</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;记录一下hexo的安装与初始化过程&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#记录一下hexo的安装与初始化过程&quot;&gt;&lt;/a&gt; 记录一下Hexo的安装与初始化过程&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;官方文档:&lt;a href=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://arragon.github.io/2023/06/04/17-18-08/"/>
    <id>https://arragon.github.io/2023/06/04/17-18-08/</id>
    <published>2023-06-04T09:18:08.890Z</published>
    <updated>2023-06-04T09:16:29.916Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
